// notifications_page.dart
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:http/http.dart' as http;

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ main.dart, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ flutterLocalNotificationsPlugin
import 'main.dart';

/// –ê–¥—Ä–µ—Å Laravel API (–¥–ª—è Android-—ç–º—É–ª—è—Ç–æ—Ä–∞)
const String backendUrl = 'http://10.0.2.2:8000/api/profile/device-token';

/// Laravel Sanctum-—Ç–æ–∫–µ–Ω (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π! )
const String sanctumToken =
    'Bearer 1|0wDXZiVSSilt7gcs9SkP4G6Nu8NnOKb7a3KtHARs4ac3f8b3';

class NotificationsPage extends StatefulWidget {
  static const routeName = '/notifications';

  const NotificationsPage({super.key});

  @override
  State<NotificationsPage> createState() => _NotificationsPageState();
}

class _NotificationsPageState extends State<NotificationsPage> {
  String? deviceToken;
  String responseMessage = "";

  @override
  void initState() {
    super.initState();
    _initFCM();
  }

  Future<void> _initFCM() async {
    // –°–ª—É—à–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Foreground
    FirebaseMessaging.onMessage.listen((RemoteMessage message) async {
      print("üéâ Foreground Push –ø–æ–ª—É—á–µ–Ω!");
      print(
          "üì© ${message.notification?.title} | ${message.notification?.body}");

      if (message.notification != null) {
        await flutterLocalNotificationsPlugin.show(
          message.notification.hashCode,
          message.notification?.title,
          message.notification?.body,
          const NotificationDetails(
            android: AndroidNotificationDetails(
              'fcm_channel',
              'FCM Notifications',
              channelDescription: '–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –¥–ª—è FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
              importance: Importance.high,
              icon: 'ic_notification',
              priority: Priority.high,
            ),
          ),
        );
      }
    });

    // –°–ª—É—à–∞–µ–º, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      print("üì≤ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ");
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫—Ä—ã—Ç–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    FirebaseMessaging.instance
        .getInitialMessage()
        .then((RemoteMessage? message) {
      if (message != null) {
        print(
            "üîÑ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${message.notification?.title}");
      }
    });

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    NotificationSettings settings =
        await FirebaseMessaging.instance.requestPermission();

    if (settings.authorizationStatus == AuthorizationStatus.authorized) {
      // –ü–æ–ª—É—á–∞–µ–º FCM-—Ç–æ–∫–µ–Ω
      final token = await FirebaseMessaging.instance.getToken();
      setState(() {
        deviceToken = token;
      });
      if (token != null) {
        await _sendTokenToBackend(token);
      }
    } else {
      setState(() {
        responseMessage = "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ";
      });
    }
  }

  Future<void> _sendTokenToBackend(String token) async {
    final response = await http.post(
      Uri.parse(backendUrl),
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Authorization': sanctumToken,
      },
      body: '{"device_token": "$token"}',
    );

    print("Device Token: $token");
    print("Status: ${response.statusCode}");
    print("Body: ${response.body}");

    setState(() {
      responseMessage = response.statusCode == 200
          ? '‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!'
          : '‚ùå –û—à–∏–±–∫–∞: ${response.statusCode} ${response.body}';
    });
  }

  Future<void> _refreshTokenAndResend() async {
    final settings = await FirebaseMessaging.instance.requestPermission();
    if (settings.authorizationStatus != AuthorizationStatus.authorized) {
      setState(() {
        responseMessage = "‚õî –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ";
      });
      return;
    }

    final refreshedToken = await FirebaseMessaging.instance.getToken();
    if (refreshedToken != null) {
      setState(() {
        deviceToken = refreshedToken;
      });
      await _sendTokenToBackend(refreshedToken);
    } else {
      setState(() {
        responseMessage = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ";
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('FCM Notifications'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'FCM Token:',
                style: Theme.of(context).textTheme.titleLarge,
              ),
              const SizedBox(height: 10),
              SelectableText(deviceToken ?? '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...'),
              const SizedBox(height: 20),
              ElevatedButton.icon(
                onPressed: _refreshTokenAndResend,
                icon: const Icon(Icons.refresh),
                label: const Text("–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ"),
              ),
              const SizedBox(height: 20),
              ElevatedButton.icon(
                onPressed: () async {
                  // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω, –∑–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º –∑–∞–Ω–æ–≤–æ
                  await FirebaseMessaging.instance.deleteToken();
                  await _refreshTokenAndResend();
                },
                icon: const Icon(Icons.delete),
                label: const Text("–£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å"),
              ),
              const SizedBox(height: 20),
              Text(responseMessage),
            ],
          ),
        ),
      ),
    );
  }
}
